{{#jackson}}
import com.fasterxml.jackson.annotation.JsonCreator;
{{/jackson}}

import lombok.AllArgsConstructor;
import lombok.ToString;

/**
 * {{^description}}Gets or Sets {{{name}}}{{/description}}{{{description}}}
 */
@ToString
@AllArgsConstructor
@SuppressWarnings("unused")
{{>additionalEnumTypeAnnotations}}public enum {{{datatypeWithEnum}}}{{^datatypeWithEnum}}{{{classname}}}{{/datatypeWithEnum}} {
  {{#gson}}
  {{#allowableValues}}{{#enumVars}}
  @SerializedName({{#isInteger}}"{{/isInteger}}{{#isDouble}}"{{/isDouble}}{{#isLong}}"{{/isLong}}{{#isFloat}}"{{/isFloat}}{{{value}}}{{#isInteger}}"{{/isInteger}}{{#isDouble}}"{{/isDouble}}{{#isLong}}"{{/isLong}}{{#isFloat}}"{{/isFloat}})
  {{{name}}}({{{value}}}){{^-last}},
  {{/-last}}{{#-last}};{{/-last}}{{/enumVars}}{{/allowableValues}}
  {{/gson}}
  {{^gson}}
  {{#allowableValues}}{{#enumVars}}
  {{#enumDescription}}
  /**
   * {{enumDescription}}
   */
  {{/enumDescription}}
  {{{name}}}({{{value}}}){{^-last}},
  {{/-last}}{{#-last}};{{/-last}}{{/enumVars}}{{/allowableValues}}
  {{/gson}}

  private {{{dataType}}} value;

  @JsonValue
  public String getValue() {
    return this.value;
  }

  @JsonCreator
  public static {{{datatypeWithEnum}}}{{^datatypeWithEnum}}{{{classname}}}{{/datatypeWithEnum}} fromValue({{{dataType}}} value) {
    for ({{{datatypeWithEnum}}}{{^datatypeWithEnum}}{{{classname}}}{{/datatypeWithEnum}} b : {{{datatypeWithEnum}}}{{^datatypeWithEnum}}{{{classname}}}{{/datatypeWithEnum}}.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    {{#isNullable}}return null;{{/isNullable}}{{^isNullable}}throw new IllegalArgumentException("Unexpected value '" + value + "'");{{/isNullable}}
  }
}
